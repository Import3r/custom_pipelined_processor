module forwarding_unit(EX_MEM_RegWrite, EX_MEM_RegDest, MEM_WB_RegWrite, MEM_WB_RegDest, ID_EX_Rs, ID_EX_Rt, ID_EX_Rd,forwardA,forwardB;
input EX_MEM_RegWrite;
input [4:0] EX_MEM_RegDest, ID_EX_Rs, ID_EX_Rt, ID_EX_Rd;
output [1:0] forwardA, forwardB;
initial begin
forwardA = 2'b00; //defualt case
forwardB = 2'b00;
end
always @* begin
// EX Hazard
if(EX_MEM_RegWrite && (EX_MEM_RegDest != 5'd0) && EX_MEM_RegDest == ID_EX_Rs) begin
forwardA = 2'b10;
if(EX_MEM_RegWrite && (EX_MEM_RegDest != 5'd0) && EX_MEM_RegDest == ID_EX_Rt) forwardB = 2'b10;
end

else if(EX_MEM_RegWrite && (EX_MEM_RegDest != 5'd0) && EX_MEM_RegDest == ID_EX_Rt) begin
forwardB = 2'b10;
if(EX_MEM_RegWrite && (EX_MEM_RegDest != 5'd0) && EX_MEM_RegDest == ID_EX_Rs) forwardA = 2'b10;
end

else begin
//MEM
if(MEM_WB_RegWrite && (MEM_WB_RegDest != 5'd0) && MEM_WB_RegDest == ID_EX_Rs) begin
forwardA = 2'b01;
if(MEM_WB_RegWrite && (MEM_WB_RegDest != 5'd0) && MEM_WB_RegDest == ID_EX_Rt) forwardB = 2'b01;
end

if(MEM_WB_RegWrite && (MEM_WB_RegDest != 5'd0) && MEM_WB_RegDest == ID_EX_Rt) begin
forwardB = 2'b01;
if(MEM_WB_RegWrite && (MEM_WB_RegDest != 5'd0) && MEM_WB_RegDest == ID_EX_Rs) forwardA = 2'b01;
end
//defualt case
else begin
forwardA = 2'b00;
forwardB = 2'b00;
end
end
end
endmodule